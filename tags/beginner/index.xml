<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>beginner on Vittorio Mattei</title><link>https://vittoriomattei.com/tags/beginner/</link><description>Recent content in beginner on Vittorio Mattei</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 22 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://vittoriomattei.com/tags/beginner/index.xml" rel="self" type="application/rss+xml"/><item><title>Python if-else alternatives for better design</title><link>https://vittoriomattei.com/2022/python-if-else-alternatives/</link><pubDate>Fri, 22 Jul 2022 00:00:00 +0000</pubDate><guid>https://vittoriomattei.com/2022/python-if-else-alternatives/</guid><description>There is no doubt that one of the first conditional construct a programmer will encounter is the if-elif-else construct.
While the syntax may change across languages, the logical meaning is always the same:
if condition_1: do something else if condition_2: do something different else: do something generic While this construct is incredibly easy to use, there are some drawbacks to it, when the logic starts expanding.
Note that obviously there isn&amp;rsquo;t a best rule, the only way to decide which solution to use is on a case by case scenario.</description></item></channel></rss>